package editor.gui.controls;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.ColorUIResource;
import java.awt.*;
import java.util.*;
import java.util.List;

/**
 * Created by IntelliJ IDEA.
 * User: Peter
 * Date: 6/24/11
 * Time: 7:49 PM
 * Computer: Peterbjornx-PC.rootdomain.asn.local (192.168.178.27)
 */
public class ColourEditor extends JPanel{
    private JSlider redSlider;
    private JSlider greenSlider;
    private JSlider blueSlider;
    private JButton colourPreview;
    private JPanel mainPane;
    private Color colour = Color.WHITE;
    private List<ChangeListener> listenerList = new LinkedList<ChangeListener>();

    public ColourEditor() {
        $$$setupUI$$$();
        ChangeListener sliderListener = new ChangeListener() {
            /**
             * Invoked when the target of the listener has changed its state.
             *
             * @param e a ChangeEvent object
             */
            public void stateChanged(ChangeEvent e) {
                colour = new Color(redSlider.getValue(), greenSlider.getValue(), blueSlider.getValue());
                colourPreview.setBackground(colour);
                ChangeEvent event = new ChangeEvent(ColourEditor.this);
                for (ChangeListener l : listenerList)
                    l.stateChanged(event);
            }
        };
        redSlider.addChangeListener(sliderListener);
        greenSlider.addChangeListener(sliderListener);
        blueSlider.addChangeListener(sliderListener);
        colourPreview.setBackground(colour);
    }

    public boolean addChangeListener(ChangeListener changeListener) {
        return listenerList.add(changeListener);
    }

    public boolean removeChangeListener(ChangeListener o) {
        return listenerList.remove(o);
    }

    public int getColour() {
        return colour.getRGB();
    }

    public void setColour(int colourRGB) {
        Color colour = new Color(colourRGB);
        redSlider.setValue(colour.getRed());
        greenSlider.setValue(colour.getGreen());
        blueSlider.setValue(colour.getBlue());
        colourPreview.setBackground(colour);
        this.colour = colour;
    }
    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        redSlider = new JSlider();
        redSlider.setBackground(new Color(-65536));
        redSlider.setMaximum(255);
        redSlider.setValue(255);
        add(redSlider, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        greenSlider = new JSlider();
        greenSlider.setBackground(new Color(-16711936));
        greenSlider.setMajorTickSpacing(0);
        greenSlider.setMaximum(255);
        greenSlider.setValue(255);
        add(greenSlider, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        blueSlider = new JSlider();
        blueSlider.setBackground(new Color(-16776961));
        blueSlider.setForeground(UIManager.getColor("Button.foreground"));
        blueSlider.setMaximum(255);
        blueSlider.setValue(255);
        add(blueSlider, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Red:");
        add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Green:");
        add(label2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setHorizontalTextPosition(11);
        label3.setText("Blue:");
        add(label3, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        colourPreview = new JButton();
        colourPreview.setEnabled(false);
        colourPreview.setText("Preview");
        add(colourPreview, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }


}
