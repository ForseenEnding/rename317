package editor.gui.dockables;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Created by IntelliJ IDEA.
 * User: Peter Bosch
 * Date: 25-6-11
 * Time: 15:29
 * To change this template use File | Settings | File Templates.
 */
public class SettingsBrushEditor {
    private JCheckBox bit1Checkbox;
    private JCheckBox bit2Checkbox;
    private JCheckBox bit3Checkbox;
    private JCheckBox bit4Checkbox;
    private JCheckBox bit5Checkbox;
    private JLabel bit678Label;
    private JButton loadFromTileButton;
    private JPanel mainPane;
    private int bitField = 0;
    private int currentTileBits = -1;

    public SettingsBrushEditor() {
        addBitFieldHandlers(bit1Checkbox, 0);
        addBitFieldHandlers(bit2Checkbox, 1);
        addBitFieldHandlers(bit3Checkbox, 2);
        addBitFieldHandlers(bit4Checkbox, 3);
        addBitFieldHandlers(bit5Checkbox, 4);
        loadFromTileButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (currentTileBits != -1)
                    setBitField(currentTileBits);
            }
        });
    }

    private void addBitFieldHandlers(final JCheckBox bitCheckbox, final int bitId) {
        bitCheckbox.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                if (bitCheckbox.isSelected())
                    bitField |= 1 << bitId;
                else
                    bitField &= ~(1 << bitId);
            }
        });
    }

    public int getBitField() {
        return bitField;
    }

    public void setCurrentTileBits(int bits) {
        currentTileBits = bits;
    }

    public void setBitField(int bits) {
        bitField = bits;
        bit1Checkbox.setSelected((bits & 1) == 1);
        bit2Checkbox.setSelected((bits & 2) == 2);
        bit3Checkbox.setSelected((bits & 4) == 4);
        bit4Checkbox.setSelected((bits & 8) == 8);
        bit5Checkbox.setSelected((bits & 16) == 16);
        bit678Label.setText("Bits 6-8: " + ((bits >> 5) & 3));
    }

    public Component getMainPane() {
        return mainPane;
    }

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        bit1Checkbox = new JCheckBox();
        bit1Checkbox.setText("Non-walkable");
        panel1.add(bit1Checkbox, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bit2Checkbox = new JCheckBox();
        bit2Checkbox.setText("On floor below");
        panel1.add(bit2Checkbox, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bit3Checkbox = new JCheckBox();
        bit3Checkbox.setText("Remove roofs");
        panel1.add(bit3Checkbox, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bit4Checkbox = new JCheckBox();
        bit4Checkbox.setText("On minimap hl-1");
        panel1.add(bit4Checkbox, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bit5Checkbox = new JCheckBox();
        bit5Checkbox.setText("Don't render");
        panel1.add(bit5Checkbox, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bit678Label = new JLabel();
        bit678Label.setText("Bits 6-8:");
        panel1.add(bit678Label, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Tile flags:");
        mainPane.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPane.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JToolBar toolBar1 = new JToolBar();
        mainPane.add(toolBar1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        loadFromTileButton = new JButton();
        loadFromTileButton.setText("Load from selected tile");
        toolBar1.add(loadFromTileButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }
}
